<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chase Johnson</title><link>https://cjohnson19.github.io/</link><description>Recent content on Chase Johnson</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 06 Dec 2021 20:03:32 -0600</lastBuildDate><atom:link href="https://cjohnson19.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Polymorphism</title><link>https://cjohnson19.github.io/posts/polymorphism/</link><pubDate>Mon, 06 Dec 2021 20:03:32 -0600</pubDate><guid>https://cjohnson19.github.io/posts/polymorphism/</guid><description>Introduction Polymorphism is often seen as a characteristic unique to Object Oriented Programming (OOP) or at least one that it thrives in. Many have only seen polymorphism through the lens of an object oriented language and have yet to see other approaches to defining common interfaces.
I&amp;#39;ll be using Java and Standard ML (SML) to demonstrate the various types of polymorphism. Java is unique in its pervasiveness throughout professional developers and its usage as a language to teach OOP.</description></item><item><title>Functional Language Correctness</title><link>https://cjohnson19.github.io/posts/functional-language-correctness/</link><pubDate>Mon, 06 Dec 2021 18:35:32 -0600</pubDate><guid>https://cjohnson19.github.io/posts/functional-language-correctness/</guid><description>Introduction What is Functional Programming? If you already have experienced functional programming, or feel like you have a good grasp on its concepts, feel free to jump ahead to the next sub section on OCaml. This will only be review for you.
If you have never heard of functional programming, take some time to ponder on the design and don&amp;#39;t jump to conclusions.
My first time using a functional language was much like my first time programming recursively.</description></item></channel></rss>